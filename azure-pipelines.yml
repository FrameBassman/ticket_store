trigger:
  branches:
    include:
    - '*' 
  paths:
    exclude:
    - README.md

pr:
  branches:
    include:
    - '*' 
  paths:
    exclude:
    - README.md

stages:
- stage: Unit_Tests
  jobs:
  - job: Client
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: true
    variables:
      CI: true
      npm_config_cache: $(Pipeline.Workspace)/.npm
      modules_path: $(Pipeline.Workspace)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'


    - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
      inputs:
        keyfile: "**/package-lock.json, !**/node_modules/**/package-lock.json, !**/.*/**/package-lock.json"
        targetfolder: "**/node_modules, !**/node_modules/**/node_modules"
        vstsFeed: "$(ArtifactFeed)"

    - script: |
        npm install
      workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Web/Client
      displayName: Install Dependencies

    - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
      inputs:
        keyfile: "**/package-lock.json, !**/node_modules/**/package-lock.json, !**/.*/**/package-lock.json"
        targetfolder: "**/node_modules, !**/node_modules/**/node_modules"
        vstsFeed: "$(ArtifactFeed)"

    - script: |
        npm run build
      workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Web/Client
      displayName: 'npm install and build'
    - script: |
        npm test
      workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Web/Client
      displayName: 'npm test'
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: 'reports/junit.xml' 
        searchFolder: '$(build.sourcesDirectory)/Services/TicketStore.Web/Client' # Optional

  # - job: Api
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   continueOnError: true
  #   steps:
  #   - task: DotNetCoreInstaller@0
  #     inputs:
  #       version: '2.2.401'
  #     displayName: 'Install Dotnet Core'
  #   - script: |
  #       dotnet test --logger "trx;LogFileName=report.trx"
  #     workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Api.Tests.Unit
  #     displayName: 'dotnet test'
  #     env:
  #       DOTNET_CLI_TELEMETRY_OPTOUT: true
  #   - script: |
  #       dotnet tool install -g trx2junit
  #       ~/.dotnet/tools/trx2junit TestResults/report.trx
  #     workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Api.Tests.Unit
  #     displayName: 'prepare JUnit report'
  #   - task: PublishTestResults@2
  #     condition: always()
  #     inputs:
  #       testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
  #       testResultsFiles: 'TestResults/report.xml' 
  #       searchFolder: '$(build.sourcesDirectory)/Services/TicketStore.Api.Tests.Unit' # Optional

  # - job: Web
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   continueOnError: true
  #   steps:
  #   - task: DotNetCoreInstaller@0
  #     inputs:
  #       version: '2.2.401'
  #     displayName: 'Install Dotnet Core'
  #   - script: |
  #       dotnet test --logger "trx;LogFileName=report.trx"
  #     workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Web.Tests.Unit
  #     displayName: 'dotnet test'
  #     env:
  #       DOTNET_CLI_TELEMETRY_OPTOUT: true
  #   - script: |
  #       dotnet tool install -g trx2junit
  #       ~/.dotnet/tools/trx2junit TestResults/report.trx
  #     workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Web.Tests.Unit
  #     displayName: 'prepare JUnit report'
  #   - task: PublishTestResults@2
  #     condition: always()
  #     inputs:
  #       testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
  #       testResultsFiles: 'TestResults/report.xml' 
  #       searchFolder: '$(build.sourcesDirectory)/Services/TicketStore.Web.Tests.Unit' # Optional
  #       #mergeTestResults: false # Optional
  #       #failTaskOnFailedTests: false # Optional
  #       #testRunTitle: # Optional
  #       #buildPlatform: # Optional
  #       #buildConfiguration: # Optional
  #       #publishRunAttachments: true # Optional
